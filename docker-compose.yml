services:
  # Chat Session workflow worker - manages long-running chat conversations
  chat-session-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - PYTHONPATH=/app
      - AI_API_URL=http://host.docker.internal:3001/api/chat
    volumes:
      - ./src:/app/src
    command: ["sh", "-c", "python wait_for_temporal.py && python -m src.chat_session.run_worker"]
    networks:
      - temporal-network
    depends_on:
      - temporal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "wait_for_temporal.py", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Document Processing workflow worker - handles document processing from various sources
  document-processing-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - PYTHONPATH=/app
    volumes:
      - ./src:/app/src
    command: ["sh", "-c", "python wait_for_temporal.py && python -m src.document_processing.run_worker"]
    networks:
      - temporal-network
    depends_on:
      - temporal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "wait_for_temporal.py", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # S3 Event Listener Service
  s3-listener:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - PYTHONPATH=/app
      - SQS_QUEUE_URL=${SQS_QUEUE_URL:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
    volumes:
      - ./src:/app/src
    command: ["sh", "-c", "python wait_for_temporal.py && python -m src.listeners.s3_event_listener"]
    networks:
      - temporal-network
    depends_on:
      - temporal
    restart: "no"  # Don't restart if configuration is missing
    profiles:
      - listeners

  # Azure Blob Event Listener Service
  azure-listener:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - PYTHONPATH=/app
      - AZURE_SERVICEBUS_CONNECTION_STRING=${AZURE_SERVICEBUS_CONNECTION_STRING:-}
      - AZURE_SERVICEBUS_TOPIC=${AZURE_SERVICEBUS_TOPIC:-blob-events}
      - AZURE_SERVICEBUS_SUBSCRIPTION=${AZURE_SERVICEBUS_SUBSCRIPTION:-temporal-subscription}
    volumes:
      - ./src:/app/src
    command: ["sh", "-c", "python wait_for_temporal.py && python -m src.listeners.azure_blob_listener"]
    networks:
      - temporal-network
    depends_on:
      - temporal
    restart: "no"  # Don't restart if configuration is missing
    profiles:
      - listeners

  # HTTP Webhook Listener Service
  webhook-listener:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - PYTHONPATH=/app
      - WEBHOOK_PORT=8000
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-}
    volumes:
      - ./src:/app/src
    command: ["sh", "-c", "python wait_for_temporal.py && python -m src.listeners.webhook_listener"]
    ports:
      - "8000:8000"
    networks:
      - temporal-network
    depends_on:
      - temporal
    restart: unless-stopped
    profiles:
      - listeners

  # Test Runner Service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./pytest.ini:/app/pytest.ini
      - ./htmlcov:/app/htmlcov  # Mount coverage output directory
    command: ["python", "-m", "pytest", "tests/", "-v", "--tb=short", "--cov=src", "--cov-report=html", "--cov-report=term"]
    networks:
      - temporal-network
    profiles:
      - test

  # --- Temporal Stack ---

  temporal:
    image: temporalio/auto-setup:latest
    ports: ["7233:7233"]
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
    networks:
      - temporal-network
    depends_on:
      postgresql:
        condition: service_healthy

  temporal-ui:
    image: temporalio/ui:latest
    ports: ["8080:8080"]
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    networks:
      - temporal-network
    depends_on:
      - temporal

  postgresql:
    image: postgres:latest
    environment:
      - POSTGRES_USER=temporal
      - POSTGRES_PASSWORD=temporal
    ports: ["5432:5432"]
    volumes:
      - temporal-postgres-data:/var/lib/postgresql/data
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "temporal"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  temporal-postgres-data:

networks:
  temporal-network: